using ReadME.Models;
using ReadME.Services;

namespace ReadME
{
    public partial class BookDetailsPage : ContentPage
    {
        // Variables priv√©es pour le service, l'ID, l'√©tat de chargement et le livre
        private readonly BookService _bookService;
        private readonly int _bookId;
        private bool _isLoading;
        private Book _book;

        // Propri√©t√© pour acc√©der et modifier le livre
        public Book Book
        {
            get => _book;
            set
            {
                _book = value;
                OnPropertyChanged();
            }
        }

        // Constructeur prenant l'ID du livre
        public BookDetailsPage(int bookId)
        {
            // Initialisation de l'interface
            InitializeComponent();
            // Cr√©ation du service de gestion des livres
            _bookService = new BookService();
            // Stockage de l'ID du livre
            _bookId = bookId;
            // D√©finition du contexte de liaison
            BindingContext = this;
            // Chargement des d√©tails
            LoadBookDetails();
        }

        // Chargement asynchrone des d√©tails du livre
        private async void LoadBookDetails()
        {
            if (_isLoading) return;

            _isLoading = true;
            try
            {
                // R√©cup√©ration du livre par son ID
                var book = await _bookService.GetBookByIdAsync(_bookId);
                if (book != null)
                {
                    Book = book;
                }
                else
                {
                    // Alerte en cas d'√©chec
                    await DisplayAlert("Erreur", "Impossible de charger les d√©tails du livre.", "OK");
                    await Navigation.PopAsync();
                }
            }
            catch (Exception ex)
            {
                // Gestion des erreurs
                await DisplayAlert("Erreur", $"Une erreur est survenue: {ex.Message}", "OK");
                await Navigation.PopAsync();
            }
            finally
            {
                _isLoading = false;
            }
        }

        // Gestion du bouton de retour
        private async void OnBackButtonClicked(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }

        // Gestion du clic pour lire l'EPUB
        private async void OnReadEpubClicked(object sender, EventArgs e)
        {
            try
            {
                // Affichage de l'indicateur de chargement
                LoadingIndicator.IsVisible = true;
                ReadEpubButton.IsEnabled = false;
                ReadEpubButton.Text = "T√©l√©chargement...";

                // Journalisation du t√©l√©chargement
                Console.WriteLine($"Tentative de t√©l√©chargement de l'EPUB pour le livre ID: {_bookId}");
                Console.WriteLine($"Titre du livre: {Book?.Titre}");

                // T√©l√©chargement du fichier EPUB
                var response = await _bookService.DownloadBookEpubResponseAsync(_bookId);
                Console.WriteLine($"Statut de la r√©ponse HTTP: {response.StatusCode}");
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Contenu de la r√©ponse: {responseContent}");

                // V√©rification du statut
                if (!response.IsSuccessStatusCode)
                {
                    var errorMessage = $"EPUB non disponible.\nCode: {response.StatusCode}\nR√©ponse: {responseContent}";
                    await DisplayAlert("Erreur", errorMessage, "OK");
                    return;
                }

                // V√©rification de la taille
                var contentLength = response.Content.Headers.ContentLength;
                Console.WriteLine($"Taille du contenu: {contentLength}");
                if (contentLength == 0)
                {
                    await DisplayAlert("Erreur", "Le fichier EPUB est vide.", "OK");
                    return;
                }

                // Pr√©paration du nom de fichier
                var safeTitle = string.Concat(Book.Titre.Split(Path.GetInvalidFileNameChars()));
                var tempPath = Path.Combine(FileSystem.CacheDirectory, $"{safeTitle}.epub");
                Console.WriteLine($"Sauvegarde de l'EPUB √†: {tempPath}");

                // Sauvegarde du fichier
                using (var fs = new FileStream(tempPath, FileMode.Create, FileAccess.Write))
                {
                    await response.Content.CopyToAsync(fs);
                }

                // V√©rification du fichier sauvegard√©
                var fileInfo = new FileInfo(tempPath);
                Console.WriteLine($"EPUB sauvegard√© - Taille: {fileInfo.Length} bytes");
                if (fileInfo.Length == 0)
                {
                    await DisplayAlert("Erreur", "Le fichier EPUB t√©l√©charg√© est vide.", "OK");
                    return;
                }

                // Navigation vers le lecteur EPUB
                var encodedPath = Uri.EscapeDataString(tempPath);
                await Shell.Current.GoToAsync($"epubreader?file={encodedPath}");
            }
            catch (Exception ex)
            {
                // Journalisation et affichage de l'erreur
                Console.WriteLine($"Exception dans OnReadEpubClicked: {ex.Message}");
                Console.WriteLine($"Trace de la pile: {ex.StackTrace}");
                await DisplayAlert("Erreur", $"Impossible d'ouvrir l'EPUB: {ex.Message}", "OK");
            }
            finally
            {
                // R√©initialisation de l'interface
                LoadingIndicator.IsVisible = false;
                ReadEpubButton.IsEnabled = true;
                ReadEpubButton.Text = "üìñ Lire l'EPUB";
            }
        }
    }
}